(window.webpackJsonp=window.webpackJsonp||[]).push([[236],{658:function(_,v,t){"use strict";t.r(v);var s=t(30),l=Object(s.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("p",[t("strong",[_._v("面向过程：")])]),_._v(" "),t("p",[_._v("核心是过程二字，过程指的是结局问题的步骤，设计一条流水线，机械式的思维方式，")]),_._v(" "),t("p",[_._v("根据业务逻辑从上到下写代码")]),_._v(" "),t("p",[_._v("**优点：**复杂的问题流程化，进而简单化")]),_._v(" "),t("p",[_._v("**缺点：**可扩展性差")]),_._v(" "),t("p",[t("strong",[_._v("面向对象：")])]),_._v(" "),t("p",[_._v("核心就是对象二字")]),_._v(" "),t("p",[_._v("类：类是一系列对象的特征与相似的结合体对象：特征与技能的集合体")]),_._v(" "),t("p",[_._v("将数据与函数绑定到一起，进行封装，这样能够更快速的开发程序，减少了重复代码的重写过程"),t("strong",[_._v("优点")]),_._v("：可以扩展性强，**缺点：**编程复杂度高引用场景：用户需求经常变化，互联网应用，游戏，企业内部应用")]),_._v(" "),t("p",[_._v("什么是类：类就是一系列对象的特征与技能的结合体强调：站在不同的角度，得到的分类是不同的")]),_._v(" "),t("h2",{attrs:{id:"类的构成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的构成"}},[_._v("#")]),_._v(" 类的构成")]),_._v(" "),t("p",[_._v("类(Class) 由3个部分构成")]),_._v(" "),t("ul",[t("li",[_._v("类的名称:类名")]),_._v(" "),t("li",[_._v("类的属性:一组数据")]),_._v(" "),t("li",[_._v("类的方法:允许对进行操作的方法 (行为)")])]),_._v(" "),t("p",[_._v("类的抽象")]),_._v(" "),t("p",[_._v("如何把日常生活中的事物抽象成程序中的类?")]),_._v(" "),t("p",[_._v("拥有相同(或者类似)属性和行为的对象都可以抽像出一个类")]),_._v(" "),t("p",[_._v("方法:一般名词都是类(名词提炼法)")]),_._v(" "),t("p",[t("strong",[_._v("定义类，")])]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("calss luffystudent:\n    school = 'luffycity' # 数据属性   类在定义的时候就会执行\n    def learn(self): # 函数属性\n        print('is learning')\n    def eat(self):\n        print('is eating')\n")])])]),t("p",[t("strong",[_._v("2后产生对象")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("经典类，没有继承object的类，以及它的子类都称之为经典类")])]),_._v(" "),t("li",[t("p",[_._v("新式类，继承object的类，以及它的子类都称之为新式类")])]),_._v(" "),t("li",[t("p",[_._v("新式类，有一个内置方法."),t("strong",[_._v("mro")]),_._v("( ) 广度优先")])]),_._v(" "),t("li",[t("p",[_._v("经典类，没有mro方法，一条道走到黑，深度优先")])])]),_._v(" "),t("p",[_._v("类的基本操作")]),_._v(" "),t("ul",[t("li",[_._v("查看类的名称空间print(luffyStudent."),t("strong",[_._v("dict")]),_._v(")    #print(luffyStudent."),t("strong",[_._v("dict")]),_._v("['school'])")]),_._v(" "),t("li",[_._v("查print(luffystudent.school) # == luffyStudent."),t("strong",[_._v("dict")]),_._v("['school']")]),_._v(" "),t("li",[_._v('增luffy.student.county = "China"')]),_._v(" "),t("li",[_._v("删del luffystudent.county")]),_._v(" "),t("li",[_._v("改luffystudent.school = 'luffycity'")])]),_._v(" "),t("p",[_._v("对象的基本操作__init__方法用来为对象定制自己独有的特征，实例化对象的时候自动调用")]),_._v(" "),t("ul",[t("li",[_._v("实例化对象stu = luffystudent()")]),_._v(" "),t("li",[_._v("查print(stu._"),t("em",[_._v("dict")]),_._v(")print(stu.school)")]),_._v(" "),t("li",[_._v('改stu.school = "安富中学"')]),_._v(" "),t("li",[_._v("删"),t("strong",[_._v("del stu.school")])]),_._v(" "),t("li",[_._v("增"),t("strong",[_._v('shu.class_name = "python开发"')])])]),_._v(" "),t("p",[t("strong",[_._v("绑定方法")])]),_._v(" "),t("p",[_._v("类中的数据属性，是所有对象共有的函数对象是绑定给对象的类中的函数属性：是绑定给对象使用的，绑定到不同的对象是不同的绑定方法，会把对象本身当做第一个传入，传给self类中定义的函数，是绑定给对象使用的")])])}),[],!1,null,null,null);v.default=l.exports}}]);