(window.webpackJsonp=window.webpackJsonp||[]).push([[226],{646:function(s,e,n){"use strict";n.r(e);var t=n(30),l=Object(t.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("功能：")]),s._v(" "),n("p",[s._v("执行系统指令")]),s._v(" "),n("p",[s._v("三种执行方法")]),s._v(" "),n("li",[s._v("\nsubprocess.run(*popenargs, input=None, timeout=None, check=False, **kwargs) #官方推荐\n")]),s._v(" "),n("li",[s._v("\nsubprocess.call(*popenargs, timeout=None, **kwargs) #跟上面实现的内容差不多，另一种写法\n")]),s._v(" "),n("li",[s._v("\nsubprocess.Popen() #上面各种方法的底层封装\n")]),s._v(" "),n("p",[s._v("run()")]),s._v(" "),n("p",[s._v("标准写法")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("subprocess.run(['df','-h'],stderr=subprocess.PIPE,stdout=subprocess.PIPE,check=True)   #经过python处理过后，再交由系统执行\n")])])]),n("p",[s._v("涉及到管道|的命令需要这样写")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("subprocess.run('df -h|grep disk1',shell=True) #shell=True的意思是这条命令直接交给系统去执行，不需要python负责解析\n")])])]),n("p",[s._v("call()")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#执行命令，返回命令执行状态 ， 0 or 非0\n>>> retcode = subprocess.call([\"ls\", \"-l\"])\n\n#执行命令，如果命令结果为0，就正常返回，否则抛异常\n>>> subprocess.check_call([\"ls\", \"-l\"])\n0\n\n#接收字符串格式命令，返回元组形式，第1个元素是执行状态，第2个是命令结果 \n>>> subprocess.getstatusoutput('ls /bin/ls')\n(0, '/bin/ls')\n\n#接收字符串格式命令，并返回结果\n>>> subprocess.getoutput('ls /bin/ls')\n'/bin/ls'\n\n#执行命令，并返回结果，注意是返回结果，不是打印，下例结果返回给res\n>>> res=subprocess.check_output(['ls','-l'])\n>>> res\nb'total 0\\ndrwxr-xr-x 12 alex staff 408 Nov 2 11:05 OldBoyCRM\\n'\n")])])]),n("p",[s._v("popen()与run()的区别在于，Popen会在发起命令后立刻返回，而不等命令执行结果。")]),s._v(" "),n("p",[s._v("常用参数：")]),s._v(" "),n("ul",[n("li",[s._v("args：shell命令，可以是字符串或者序列类型（如：list，元组）")]),s._v(" "),n("li",[s._v("stdin, stdout, stderr：分别表示程序的标准输入、输出、错误句柄")]),s._v(" "),n("li",[s._v("preexec_fn：只在Unix平台下有效，用于指定一个可执行对象（callable object），它将在子进程运行之前被调用")]),s._v(" "),n("li",[s._v("shell：同上")]),s._v(" "),n("li",[s._v("cwd：用于设置子进程的当前目录")]),s._v(" "),n("li",[s._v("env：用于指定子进程的环境变量。如果env = None，子进程的环境变量将从父进程中继承。")])]),s._v(" "),n("p",[s._v("popen调用后会返回一个对象，可以通过这个对象拿到命令执行结果或状态等，该对象有以下方法:")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("poll()    # 检查子进程是否终止，并返回相应字符\nwait()   # 等待子进程终止，返回相应字符\nterminate()  # 终止所启动的进程\nkill()  # 杀死所启动的进程 \ncommunicate()  #与启动的进程交互，发送数据到stdin,并从stdout接收输出，然后等待任务结束\nsend_signal(signal.xxx)     #发送系统信号\npid   # 拿到所启动进程的进程号a = subprocess.Popen('python3 guess_age.py',stdout=subprocess.PIPE,stderr=subprocess.PIPE,stdin=subprocess.PIPE,shell=True)\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<code style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 0.85em; padding: 0px; color: inherit; background: 0px 0px; border-radius: 0px; break-inside: avoid; direction: ltr; margin: 0px; border: none; display: inline; max-width: initial; overflow: initial; line-height: inherit; user-select: text !important;\">\n</code>\n")])])])])}),[],!1,null,null,null);e.default=l.exports}}]);