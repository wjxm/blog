(window.webpackJsonp=window.webpackJsonp||[]).push([[229],{650:function(e,n,s){"use strict";s.r(n);var t=s(30),r=Object(t.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("p",[this._v("服务端")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('import socketserver\n\nclass MyServer(socketserver.BaseRequestHandler):                    #重写一个类，并继承一个父类\n\n    def handle(self):                                               #父类里面有的方法\n        print ("服务端启动...")\n        while True:\n            conn = self.request\n            print (self.client_address)\n            while True:\n\n                client_data=conn.recv(1024)\n\n                print (str(client_data,"utf8"))\n                print ("waiting...")\n                server_response=input(">>>")\n                conn.sendall(bytes(server_response,"utf8"))\n                # conn.sendall(client_data)\n\n            conn.close()\n            # print self.request,self.client_address,self.server\n\n\nif __name__ == \'__main__\':                          #当模块被直接运行时，以下代码块将被运行，当模块是被导入时，代码块不被运行\n    server = socketserver.ThreadingTCPServer((\'127.0.0.1\',8098),MyServer)           #多线程，tcp协议，服务\n    server.serve_forever()                              #通过此方法启动\n')])])]),n("p",[this._v("客户端")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("import socket\n\nip_port = ('127.0.0.1',8098)\nsk = socket.socket()\nsk.connect(ip_port)\nprint (\"客户端启动：\")\nwhile True:\n    inp = input('>>>')\n    sk.sendall(bytes(inp,\"utf8\"))\n    if inp == 'exit':\n        break\n    server_response=sk.recv(1024)\n    print (str(server_response,\"utf8\"))\nsk.close()\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);