(window.webpackJsonp=window.webpackJsonp||[]).push([[228],{649:function(t,e,i){"use strict";i.r(e);var m=i(30),_=Object(m.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("p",[t._v("一、在Python中，通常有这几种方式来表示时间：")]),t._v(" "),i("ol",[i("li",[t._v("时间戳")]),t._v(" "),i("li",[t._v("格式化的时间字符串")]),t._v(" "),i("li",[t._v("元组（struct_time）共九个元素。由于Python的time模块实现主要调用C库，所以各个平台可能有所不同。")])]),t._v(" "),i("p",[t._v("二、几个定义")]),t._v(" "),i("p",[t._v("UTC（Coordinated Universal Time，世界协调时）亦即格林威治天文时间，世界标准时间。在中国为UTC+8。DST（Daylight Saving Time）即夏令时。")]),t._v(" "),i("p",[t._v("时间戳（timestamp）的方式：通常来说，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量。我们运行type(time.time())，返回的是float类型。")]),t._v(" "),i("p",[t._v("元组（struct_time）方式：struct_time元组共有9个元素，返回struct_time的函数主要有gmtime()，localtime()，strptime()。")]),t._v(" "),i("h4",{attrs:{id:"time模块的方法"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#time模块的方法"}},[t._v("#")]),t._v(" time模块的方法")]),t._v(" "),i("ul",[i("li",[t._v("time.localtime([secs])：将一个时间戳转换为当前时区的struct_time。secs参数未提供，则以当前时间为准。")]),t._v(" "),i("li",[t._v("time.gmtime([secs])：和localtime()方法类似，gmtime()方法是将一个时间戳转换为UTC时区（0时区）的struct_time。")]),t._v(" "),i("li",[t._v("time.time()：返回当前时间的时间戳。")]),t._v(" "),i("li",[t._v("time.mktime(t)：将一个struct_time转化为时间戳。")]),t._v(" "),i("li",[t._v("time.sleep(secs)：线程推迟指定的时间运行。单位为秒。")]),t._v(" "),i("li",[t._v("time.asctime([t])：把一个表示时间的元组或者struct_time表示为这种形式：'Sun Oct 1 12:04:38 2017'。如果没有参数，将会将time.localtime()作为参数传入。")]),t._v(" "),i("li",[t._v("time.ctime([secs])：把一个时间戳（按秒计算的浮点数）转化为time.asctime()的形式。如果参数未给或者为None的时候，将会默认time.time()为参数。它的作用相当于time.asctime(time.localtime(secs))。\n")]),i("li",[t._v("\ntime.strftime(format[, t])：把一个代表时间的元组或者struct_time（如由time.localtime()和time.gmtime()返回）转化为格式化的时间字符串。如果t未指定，将传入time.localtime()。\n"),i("ul")]),t._v(" "),i("li",[t._v("举例：time.strftime(\"%Y-%m-%d %X\", time.localtime()) #输出'2017-10-01 12:14:23'")])]),t._v(" "),i("p",[t._v("time.strptime(string[, format])：把一个格式化时间字符串转化为struct_time。实际上它和strftime()是逆操作。")]),t._v(" "),i("ul",[i("li",[t._v("举例：time.strptime('2017-10-3 17:54',\"%Y-%m-%d %H:%M\") #输出 time.struct_time(tm_year=2017, tm_mon=10, tm_mday=3, tm_hour=17, tm_min=54, tm_sec=0, tm_wday=1, tm_yday=276, tm_isdst=-1)")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",[t._v("\b字符串转时间格式对应表")])])]),t._v(" "),i("tbody",[i("tr",[i("td")])])]),t._v(" "),i("p",[t._v("相比于time模块，datetime模块的接口则更直观、更容易调用")]),t._v(" "),i("p",[t._v("datetime模块定义了下面这几个类：")]),t._v(" "),i("ul",[i("li",[t._v("datetime.date：表示日期的类。常用的属性有year, month, day；")]),t._v(" "),i("li",[t._v("datetime.time：表示时间的类。常用的属性有hour, minute, second, microsecond；")]),t._v(" "),i("li",[t._v("datetime.datetime：表示日期时间。")]),t._v(" "),i("li",[t._v("datetime.timedelta：表示时间间隔，即两个时间点之间的长度。")]),t._v(" "),i("li",[t._v("datetime.tzinfo：与时区有关的相关信息。（这里不详细充分讨论该类，感兴趣的童鞋可以参考python手册）")])])])}),[],!1,null,null,null);e.default=_.exports}}]);